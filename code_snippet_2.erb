<!-- This snippet was me adding a new controller, index, and rspec test for "companies" in our app.   We didn't know at the time exactly what data the client wanted to display, so that's why there are several placeholders in the table.-->
<div class="row">
  <div class="col-sm-6">
    <h3>Companies</h3>
  </div>
  
</div>
<table class="table table-striped table-with-buttons">
  <thead>
    <tr>
      <th>Company Name</th>
      <th>Placeholder</th>
      <th>Placeholder</th>
      <th>Placeholder</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <% @companies.each do |company| %>
      <tr>
        <td><%= company.name %></td>
        <td><%= "placeholder" %></td>
        <td><%= company.name %></td>
        <td><%= "placeholder" %></td>
        <td>
          <div class="dropdown">
            <a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="dropdown_<%= company.id %>" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Options</a>
            <div class="dropdown-menu" aria-labelledby="dropdown_<%= company.id %>">
              <a class="dropdown-item" href="<%= super_user_company_path(company.id) %>" data-method="delete" data-confirm="Are you sure you want to delete this company?"><i class="fa fa-trash" aria-hidden="true"></i> Delete</a>
            </div>
          </div>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>


class SuperUser::CompaniesController < BaseSuperUserController

  def index
    @companies = Company.kept
  end

  def destroy
    @company = Company.find(params[:id])
    @company.discard 
    redirect_to super_user_companies_path
  end
end

scenario "can discard a company", :js do
    Company.discard_all
    company = FactoryBot.create(:company, name:"David's Company")
    inspector = FactoryBot.create(:inspector, company: company)

    click_link "Companies"
    first(".dropdown-toggle").click
    ignore_alert
    all(".dropdown-item").last.click

    expect(page).to_not have_content("David's Company")
    expect(company.reload.discarded?).to eq(true)
    expect(inspector.reload.discarded?).to eq(true)
    
  end